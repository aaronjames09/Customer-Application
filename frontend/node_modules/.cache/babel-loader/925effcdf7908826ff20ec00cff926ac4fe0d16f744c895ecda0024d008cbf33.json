{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\OneDrive\\\\Documents\\\\Projects\\\\Customer Application\\\\customer-app\\\\src\\\\components\\\\FilteringTable.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { useTable, useGlobalFilter, useFilters } from 'react-table';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS } from './columns';\nimport './table.css';\nimport { GlobalFilter } from './GlobalFilter';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FilteringTable = () => {\n  _s();\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, useFilters, useGlobalFilter);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    setGlobalFilter\n  } = tableInstance;\n  const {\n    globalFilter\n  } = state;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalFilter, {\n      filter: globalFilter,\n      setFilter: setGlobalFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [headerGroups.map(headerGroups => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroups.getHeaderGroupProps(),\n          children: [headerGroups.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: [rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(FilteringTable, \"pjBIPaRCpDJjOFbWNcaYNCnHqio=\", false, function () {\n  return [useTable];\n});\n_c = FilteringTable;\nvar _c;\n$RefreshReg$(_c, \"FilteringTable\");","map":{"version":3,"names":["React","useMemo","useTable","useGlobalFilter","useFilters","MOCK_DATA","COLUMNS","GlobalFilter","jsxDEV","_jsxDEV","Fragment","_Fragment","FilteringTable","_s","columns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","setGlobalFilter","globalFilter","children","filter","setFilter","fileName","_jsxFileName","lineNumber","columnNumber","map","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["C:/Users/aaron/OneDrive/Documents/Projects/Customer Application/customer-app/src/components/FilteringTable.js"],"sourcesContent":["import React, {useMemo} from 'react'\r\nimport { useTable, useGlobalFilter, useFilters } from 'react-table'\r\nimport MOCK_DATA from './MOCK_DATA.json'\r\nimport { COLUMNS } from './columns'\r\nimport './table.css'\r\nimport { GlobalFilter } from './GlobalFilter'\r\n\r\nexport const FilteringTable = () => {\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n    \r\n    const tableInstance = useTable({\r\n        columns,\r\n        data,\r\n    }, useFilters,\r\n    useGlobalFilter)\r\n\r\n    const { \r\n        getTableProps, \r\n        getTableBodyProps, \r\n        headerGroups, \r\n        rows, \r\n        prepareRow, \r\n        state,\r\n        setGlobalFilter,\r\n    } = tableInstance\r\n\r\n    const { globalFilter } = state\r\n    \r\n  return (\r\n    <>\r\n    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n    <table {...getTableProps()}>\r\n        <thead>\r\n            {\r\n                headerGroups.map(headerGroups => (\r\n                    <tr {...headerGroups.getHeaderGroupProps()}>\r\n                        {\r\n                            headerGroups.headers.map((column) => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                        <th></th>\r\n                    </tr>        \r\n                ) )\r\n            }\r\n            <tr>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n            {\r\n                rows.map(row => {\r\n                    prepareRow(row)\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {\r\n                                row.cells.map( cell =>{\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            <tr>\r\n                <td></td>\r\n            </tr>\r\n        </tbody>   \r\n    </table>\r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}