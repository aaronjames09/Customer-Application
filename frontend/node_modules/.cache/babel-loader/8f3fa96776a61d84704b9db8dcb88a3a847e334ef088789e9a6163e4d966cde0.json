{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\OneDrive\\\\Documents\\\\Git Projects\\\\Customer Application\\\\customer-app\\\\frontend\\\\src\\\\CustomerTable.js\",\n  _s = $RefreshSig$();\n// src/CustomerTable.js\nimport React, { useEffect, useState, useMemo } from 'react';\nimport axios from 'axios';\nimport { useTable, usePagination, useSortBy, useGlobalFilter } from 'react-table';\nimport './CustomerTable.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomerTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(10); // Number of records per page\n\n  const indexOfLastRecord = currentPage * recordsPerPage;\n  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;\n  const currentRecords = data.slice(indexOfFirstRecord, indexOfLastRecord);\n  const nPages = Math.ceil(data.length / recordsPerPage);\n  // Fetch data for the current page\n  const fetchData = async pageIndex => {\n    try {\n      setLoading(true);\n      const result = await axios.get(`http://localhost:3000/customers?page=${pageIndex + 1}&limit=${pageSize}`);\n      console.log('API Response:', result.data); // Log the API response\n      console.log('API Response: data', result.data.data);\n      if (result.data && Array.isArray(result.data.data)) {\n        setData(result.data.data);\n        setPageCount(Math.ceil(result.data.totalRecords / pageSize));\n      } else {\n        throw new Error('Data format is incorrect, expected an array in data field');\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const columns = useMemo(() => [{\n    Header: 'Serial No',\n    accessor: 'sno'\n  }, {\n    Header: 'Customer Name',\n    accessor: 'customer_name'\n  }, {\n    Header: 'Age',\n    accessor: 'age'\n  }, {\n    Header: 'Phone',\n    accessor: 'phone'\n  }, {\n    Header: 'Customer Location',\n    accessor: 'customer_location'\n  }, {\n    Header: 'Created At',\n    accessor: 'created_at'\n  }], []);\n\n  // Use react-table hooks\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    state,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    manualPagination: true,\n    // Tell the usePagination hook that we'll handle our own pagination\n    pageCount\n  }, useGlobalFilter, useSortBy, usePagination);\n  const {\n    globalFilter,\n    pageIndex\n  } = state;\n  useEffect(() => {\n    fetchData(pageIndex); // Fetch data whenever pageIndex changes\n  }, [pageIndex]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: globalFilter || '',\n      onChange: e => setGlobalFilter(e.target.value || undefined),\n      placeholder: \"Search...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: page.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CustomerTable, \"Mkm3DvONVhPerPk3wuSutwMKMu8=\", false, function () {\n  return [useTable];\n});\n_c = CustomerTable;\nexport default CustomerTable;\nvar _c;\n$RefreshReg$(_c, \"CustomerTable\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","axios","useTable","usePagination","useSortBy","useGlobalFilter","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomerTable","_s","data","setData","loading","setLoading","error","setError","pageCount","setPageCount","currentPage","setCurrentPage","pageSize","indexOfLastRecord","recordsPerPage","indexOfFirstRecord","currentRecords","slice","nPages","Math","ceil","length","fetchData","pageIndex","result","get","console","log","Array","isArray","totalRecords","Error","message","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canNextPage","canPreviousPage","pageOptions","state","gotoPage","nextPage","previousPage","setGlobalFilter","manualPagination","globalFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aaron/OneDrive/Documents/Git Projects/Customer Application/customer-app/frontend/src/CustomerTable.js"],"sourcesContent":["// src/CustomerTable.js\r\nimport React, { useEffect, useState, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useTable, usePagination, useSortBy, useGlobalFilter } from 'react-table';\r\nimport './CustomerTable.css';\r\n\r\nconst CustomerTable = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10); // Number of records per page\r\n\r\n  const indexOfLastRecord = currentPage * recordsPerPage;\r\n  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;\r\n  const currentRecords = data.slice(indexOfFirstRecord, indexOfLastRecord);\r\n  const nPages = Math.ceil(data.length / recordsPerPage)\r\n  // Fetch data for the current page\r\n  const fetchData = async (pageIndex) => {\r\n    try {\r\n      setLoading(true);\r\n      const result = await axios.get(`http://localhost:3000/customers?page=${pageIndex + 1}&limit=${pageSize}`);\r\n      console.log('API Response:', result.data); // Log the API response\r\n      console.log('API Response: data', result.data.data);\r\n      if (result.data && Array.isArray(result.data.data)) {\r\n        setData(result.data.data);\r\n        setPageCount(Math.ceil(result.data.totalRecords / pageSize));\r\n      } else {\r\n        throw new Error('Data format is incorrect, expected an array in data field');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      { Header: 'Serial No', accessor: 'sno' },\r\n      { Header: 'Customer Name', accessor: 'customer_name' },\r\n      { Header: 'Age', accessor: 'age' },\r\n      { Header: 'Phone', accessor: 'phone' },\r\n      { Header: 'Customer Location', accessor: 'customer_location' },\r\n      { Header: 'Created At', accessor: 'created_at' }\r\n    ],\r\n    []\r\n  );\r\n\r\n  // Use react-table hooks\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    state,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setGlobalFilter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      manualPagination: true, // Tell the usePagination hook that we'll handle our own pagination\r\n      pageCount\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const { globalFilter, pageIndex } = state;\r\n\r\n  useEffect(() => {\r\n    fetchData(pageIndex); // Fetch data whenever pageIndex changes\r\n  }, [pageIndex]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        value={globalFilter || ''}\r\n        onChange={(e) => setGlobalFilter(e.target.value || undefined)}\r\n        placeholder=\"Search...\"\r\n      />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                  {column.render('Header')}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' ðŸ”½'\r\n                        : ' ðŸ”¼'\r\n                      : ''}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => (\r\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div>\r\n        <button\r\n          onClick={() => previousPage()}\r\n          disabled={!canPreviousPage}\r\n        >\r\n          {'<'}\r\n        </button>\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>\r\n        </span>\r\n        <button\r\n          onClick={() => nextPage()}\r\n          disabled={!canNextPage}\r\n        >\r\n          {'>'}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}